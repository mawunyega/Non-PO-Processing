import csv
import pandas as pd
import numpy as np
import random
import math
import operator
from collections import Counter

def getData(filename):
	data = pd.read_csv(filename)

	data = data.astype(float).values.tolist()
	random.shuffle(data)

	return data


def dataSplit(data,testTargets, testFeatures, trainTargests, trainFeatures,test_size):

	
	testing_data = data[:-int(test_size*len(data))]
	training_data = data[-int(test_size*len(data)):]

	#split testing data into features and targets
	for i in range(len(testing_data)):
		testTargets.append(testing_data[i][-1])

	for u in range(len(testing_data)):
		testFeatures.append(testing_data[u][:-1])


	#split training data into features and targets
	for t in range(len(training_data)):
		trainTargests.append(training_data[t][-1])

	for x in range(len(training_data)):
		trainFeatures.append(training_data[x][:-1])

	return testing_data, training_data


def distance(instance1, instance2):
    # just in case, if the instances are lists or tuples:
    instance1 = np.array(instance1) 
    instance2 = np.array(instance2)
    
    return np.linalg.norm(instance1 - instance2)


def get_neighbors(training_set, labels, test_instance, k, distance=distance):
    distances = []
    for index in range(len(training_set)):
        dist = distance(test_instance, training_set[index])
        distances.append((training_set[index], dist, labels[index]))
    distances.sort(key=lambda x: x[1])
    neighbors = distances[:k]
    return neighbors

def vote(neighbors):
    class_counter = Counter()
    for neighbor in neighbors:
        class_counter[neighbor[2]] += 1
    return class_counter.most_common(1)[0][0]


def vote_prob(neighbors):
    class_counter = Counter()
    for neighbor in neighbors:
        class_counter[neighbor[2]] += 1
    labels, votes = zip(*class_counter.most_common())
    winner = class_counter.most_common(1)[0][0]
    votes4winner = class_counter.most_common(1)[0][1]
    return winner, votes4winner/sum(votes)

def main():

	dataSet = getData('tt.csv')

	testTargets =   []
	testFeatures =  []
	trainTargests = []
	trainFeatures = []


	splitRatio = 0.8

	testData, trainData = dataSplit(dataSet, testTargets, testFeatures, trainTargests, trainFeatures, splitRatio)

	print('Train set: ' + repr(len(trainData)))
	print('Test set: ' + repr(len(testData)))
	
	#print(trainFeatures)
	#print(testFeatures)

	#print(testData)
	#print(trainData)

	#print(len(testFeatures))

	#print(euclideanDistance([3, 5], [1, 1]))
	#print(euclideanDistance([3, 5], [1, 1]))
	#print(distance(testFeatures[1], trainFeatures[1]))

	#print(trainFeatures[:2], trainTargests[:2])
	#print(testFeatures[:2], testTargets[:2])


	#tt = [[1.00,2281299,0.00739,0.17]]
	#tt_labels = [24010111]

	for i in range(len(testTargets)):
		neighbors = get_neighbors(trainFeatures, trainTargests, testFeatures[i],5,distance=distance)
		#neighbors = get_neighbors(trainFeatures, trainTargests, tt[i],3,distance=distance)

		#vote class and probability
		print("index: ", i, 
          ", vote_prob: ", vote_prob(neighbors), 
          ", label: ", testTargets[i],   #tt_labels[i], #testTargets
          ", data: ", testFeatures[i],  #tt[i], #testFeatures
          ", result of vote: ", vote(neighbors),
          ", K nearest neighbors: ", neighbors)



		# print("index: ", i,
		# 	", Testing Data: ", testFeatures[i],
		# 	", Test Targets: ", testTargets[i],
		# 	", K nearest neighbors: ", neighbors)


		# print("index: ", i, 
  #         ", result of vote: ", vote(neighbors), 
  #         ", label: ", testTargets[i], 
  #         ", data: ", testFeatures[i])

	
main()